// rollup.config.js
import typescript from 'rollup-plugin-typescript2';
import vue from 'rollup-plugin-vue';
import scss from 'rollup-plugin-scss';
import css from 'rollup-plugin-css-only';
import { promises as fs } from 'fs';
import { builtinModules, createRequire } from 'module';
import { resolve } from 'path';
import { fileURLToPath } from 'url';
import { nodeResolve } from '@rollup/plugin-node-resolve';
import commonjs from '@rollup/plugin-commonjs';
import esbuild from 'rollup-plugin-esbuild';
import json from '@rollup/plugin-json';
import replace from '@rollup/plugin-replace';
import alias from '@rollup/plugin-alias';
import dts from 'rollup-plugin-dts';

const require = createRequire(import.meta.url);
const pkg = require('./package.json');

const DEV = !!process.env.DEV;
const PROD = !DEV;

const ROOT = fileURLToPath(import.meta.url);
const r = p => resolve(ROOT, '..', p);

const external = [
  ...Object.keys(pkg.dependencies),
  ...builtinModules.flatMap(m => (m.includes('punycode') ? [] : [m, `node:${m}`])),
  r('types/shared.d.ts'),
];

const basePlugins = [
  alias({
    entries: {
      'readable-stream': 'stream',
    },
  }),
  replace({
    'navigator.userAgentData': 'undefined',
    'navigator.userAgent': 'undefined',
    preventAssignment: true,
  }),
  commonjs(),
  nodeResolve({ preferBuiltins: false }),
  esbuild({ target: 'node14' }),
  json(),
];

export default [
  {
    input: r('src/index.ts'),
    output: {
      format: 'esm',
      entryFileNames: `[name].js`,
      chunkFileNames: 'serve-[hash].js',
      dir: r('dist'),
      sourcemap: DEV,
    },
    external,
    plugins: [
      ...basePlugins,
      typescript({
        tsconfig: './tsconfig.json', // Убедитесь, что путь к вашему tsconfig правильный
        compilerOptions: {
          module: 'esnext', // Задайте модуль 'esnext'
          outDir: r('dist'), // Убедитесь, что outDir совпадает с dir в настройках Rollup
        },
      }),
      vue({
        script: {
          refSugar: true,
        },
      }),
      scss(),
      css({ output: 'bundle.css' }),
    ],
    onwarn(warning, warn) {
      if (warning.code !== 'EVAL') warn(warning);
    },
  },
  {
    input: r('src/index.ts'),
    output: {
      format: 'esm',
      file: r('dist/index.d.ts'),
    },
    external,
    plugins: [...basePlugins, dts({ respectExternal: true })],
  },
];
